name: Valgrind

on:
  push:
    tags:
      - V*
  workflow_dispatch:

env:
  RELEASE: 0
  artifact: 0

jobs:  
  valgrind_linux:
    name: Valgrind / ROCKSDB=${{ matrix.TEST_USE_ROCKSDB }} / ${{ matrix.COMPILER }}
    timeout-minutes: 240
    strategy:
      fail-fast: false
      matrix:
        TEST_USE_ROCKSDB: [0, 1]
        COMPILER: [gcc]
    runs-on: ubuntu-20.04
    outputs:
      core_test_issue_reported: ${{ steps.core_test.outputs.issue_reported }}
      rpc_test_issue_reported: ${{ steps.rpc_test.outputs.issue_reported }}
    env:
      COMPILER: ${{ matrix.COMPILER }}
      TEST_USE_ROCKSDB: ${{ matrix.TEST_USE_ROCKSDB }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #v3.1.0
        with:
          submodules: "true"
      - name: Git Submodule Update
        run: git submodule update --init --recursive
      - name: Install Dependencies
        run: ci/actions/linux/install_deps.sh
      - name: Build Tests
        id: build_tests
        run: docker run -e TEST_USE_ROCKSDB -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c \
          "cd /workspace && RELEASE=true ./ci/build-ci.sh /usr/lib/x86_64-linux-gnu/cmake/Qt5 'core_test rpc_test'"
      - name: Run core_test
        id: core_test
        continue-on-error: true
        run: |
          docker run -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c \
            "cd /workspace/build && valgrind --leak-check=full --track-origins=yes --suppressions=../valgrind.supp --error-exitcode=1 --log-file=core_test_report ./core_test"
          echo "issue_reported=$?" >> $GITHUB_OUTPUT
      - name: Run rpc_test
        id: rpc_test
        continue-on-error: true
        run: |
          docker run -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c \
            "cd /workspace/build && valgrind --leak-check=full --track-origins=yes --suppressions=../valgrind.supp --error-exitcode=1 --log-file=rpc_test_report ./rpc_test"
          echo "issue_reported=$?" >> $GITHUB_OUTPUT
      - name: Test Reports
        id: show_report
        run: |
          (
            reports=$(ls build/*_report)
            if [[ -n "${reports}" ]]; then
              echo "Report Output:"
              for report in ${reports}; do
                echo "File: $report"
                docker run -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c "cat /workspace/${report}"
                echo
              done
            else
              echo "No report has been generated."
            fi
          ) || exit 0
